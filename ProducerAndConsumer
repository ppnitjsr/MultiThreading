package MultiThreading;

import lombok.Synchronized;

import java.util.LinkedList;

public class ProducerAndConsumer {

    LinkedList<Integer> list = new LinkedList<>();
    //int capacity = 2;

    void producer() throws InterruptedException {
        int value = 0;
        while(true){
            synchronized(this){
                while(list.size()>0){
                    wait();
                }
                System.out.println("Produce : "+value);
                list.add(value++);
                notify();
                Thread.sleep(1000);
            }
        }
    }

    public void consumer() throws InterruptedException {
        while(true){
            synchronized (this){
                while (list.size()==0){
                    wait();
                }
                System.out.println("Consume : "+list.removeFirst());
                notify();
                Thread.sleep(1000);
            }

        }
    }
}

class main{
    public static void main(String[] args) throws InterruptedException {
        ProducerAndConsumer pc = new ProducerAndConsumer();

        Thread t1 = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    pc.producer();
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        Thread t2 = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    pc.consumer();
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        t1.start();
        t2.start();

        t1.join();
        t2.join();
    }
}
